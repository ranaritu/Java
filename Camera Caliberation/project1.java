import java.text.NumberFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Arrays;
import java.util.Locale;
import java.text.FieldPosition;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.StreamTokenizer;

import Jama.EigenvalueDecomposition;
import Jama.LUDecomposition;
import Jama.Matrix;
import Jama.util.*;

public class project1 {

	public static void main(String[] args) {
	
		/**
		 * get the matrix B
		 */

double[][] array = {{18, 0, 0, 1, 0, 0, 0, 0, -8100, 0, 0, -450},
		{0, 0, 0, 0, 18, 0, 0, 1, -5652, 0, 0, -314},
		{18, 0, 14, 1, 0, 0, 0, 0, -8154, 0, -6342, -453},
		{0, 0, 0, 0, 18, 0, 14, 1, -15372, 0, -11830, -845},
		{0, 18, 14, 1, 0, 0, 0, 0, 0, -25272, -19656, -1404},
		{0, 0, 0, 0, 0, 18, 14, 1, 0, -15372, -11956, -854},
		{0, 18, 0, 1, 0, 0, 0, 0, 0, -25326, 0, -1407},
		{0, 0, 0, 0, 0, 18, 0, 1, 0, -5760, 0, -320},
		{14, 0, 6, 1, 0, 0, 0, 0, -8022, 0, -3438, -573},
		{0, 0, 0, 0, 14, 0, 6, 1, -7588, 0, -3252, -542},
		{0, 6, 8, 1, 0, 0, 0, 0, 0, -10818, -14424, -1803},
		{0, 0, 0, 0, 0, 6, 8, 1, 0, -3612, -4816, -602}}; 


/**
 * Next 2 matrices to be used for trial purpose of approach 1
 */

double[][] array2 = {{18, 0, 0, 1, 0, 0, 0, 0, -8100, 0, 0 },
		{0, 0, 0, 0, 18, 0, 0, 1, -5652, 0, 0 },
		{18, 0, 14, 1, 0, 0, 0, 0, -8154, 0, -6342},
		{0, 0, 0, 0, 18, 0, 14, 1, -15372, 0, -11830 },
		{0, 18, 14, 1, 0, 0, 0, 0, 0, -25272, -19656 },
		{0, 0, 0, 0, 0, 18, 14, 1, 0, -15372, -11956 },
		{0, 18, 0, 1, 0, 0, 0, 0, 0, -25326, 0 },
		{0, 0, 0, 0, 0, 18, 0, 1, 0, -5760, 0},
		{14, 0, 6, 1, 0, 0, 0, 0, -8022, 0, -3438},
		{0, 0, 0, 0, 14, 0, 6, 1, -7588, 0, -3252 },
		{0, 6, 8, 1, 0, 0, 0, 0, 0, -10818, -14424 },
		{0, 0, 0, 0, 0, 6, 8, 1, 0, -3612, -4816 }}; 

double[][]rhsarray={{450},{314},{453},{845},{1404},{854},{1407},{320},{573},{542},{1803},{602}};

//Matrix a1 = new Matrix(array2);
//Matrix rhs = new Matrix(rhsarray);
//Matrix ans = a1.solve(rhs);
//
//Matrix ans2 = (a1.transpose().times(a1)).inverse().times(a1.transpose()).times(rhs);
//
//System.out.println("Your values: " +String.valueOf(Arrays.deepToString(ans2.getArray()).toString()));

/**
 * Multiply B by B transpose
 */


Matrix B = new Matrix(array); 
Matrix BTranspose = B.transpose();
Matrix BTimesBTranspose = BTranspose.times(B);

System.out.println(Arrays.deepToString(BTimesBTranspose.getArray()).toString());

/**
 * Get the eigen value and corresponding eigen vector of B*BT
 */
EigenvalueDecomposition eigen = BTimesBTranspose.eig();
Matrix V = eigen.getV();
 Matrix D = eigen.getD();
 
 
 
 System.out.println("Eigen Values = " );
	D.print(9, 6);
		System.out.print("Eigen Vectors =");
	    V.print(9, 6);
	    
	    
	    
	    
	    
	    

/**
 * Approach 1
 */
	    Matrix BTimesBTransposeInverse = BTimesBTranspose.inverse();
	    Matrix Aplus = BTimesBTransposeInverse.times(BTranspose);
	 //   System.out.println("APlus: " + String.valueOf(Arrays.deepToString(Aplus.getArray()).toString()));
	    


/**
 * substitute the value form previous matrix to array and manipulate
 */


double[][] AplusB = {{0.22442999681914566, -0.15579145201142675, 0.1255850093074793, -0.07909837713556112, 0.012174686445606042, 0.007193327396798566, -0.02646254446363372, 0.02636236248150592, -0.37859072216274914, 0.3020012089031803, 0.04286357405426955, },
		{-0.1959364335984013, 1.4767500454189104, 0.38230471171120683, 1.1489595975266411, -0.2776341503842161, -0.34517093131884735, 0.334343443986981, -0.029930446244712527, -0.23961635757346045, -3.3759123980728987, -0.0034612141420780063, },
		{-0.10831503893243977, 0.01367461233387024, 0.10744829623391933, 0.00861813260098665, -0.036285054202854994, -0.0017938229270449968, 0.03640887458835684, -0.0013908549208024867, 0.0011143834694967714, -0.028662100630590825, -3.71461156504882E-4, },
		{-6.115878535138847, 17.68728449582747, -0.11995759482891799, 10.4681182495126, -2.6461146898553807, -1.8491174091032008, 3.0369484227077237, -2.173082983087994, 8.017503595673759, -36.199803529721976, -1.1725011985572564, }, 
		{-0.17196863011169583, 0.9788114279458124, 0.20748321435661765, 0.6307812137167375, -0.19661140285293754, -0.10743652749354027, 0.19153789081825323, -0.08679099274392499, -0.0456616083148198, -1.998047682137507, 0.015220536105076121, },
		{-0.17455901742594904, 0.9056550321400163, 0.2099364892189719, 0.6737530990091223, -0.19910665091493485, -0.14264176634440062, 0.19405272637320792, 3.453666565675917E-4, -0.045485320876704094, -2.030667597191769, 0.015161773625649744, }, 
		{-0.32818549080975856, 1.2125167754033725, 0.24928371855226317, 0.8525674860534806, -0.273437322304531, -0.1489702631585459, 0.2847090040556566, -0.14604177419231235, 0.10144513575968261, -2.655108336158815, -0.03381504525314938, }, 
		{0.9489741908728604, -6.233552269865299, -2.2410538854646376, -5.043117174063781, 1.8455192850772733, 0.7339326504112194, -1.660936471568391, 0.37702012729090484, 1.6612453216169456, 14.498574999336867, -0.553748440540744, },
		{-2.4521384237890034E-4, 0.0014890103976023944, 3.0906296055855514E-4, 9.322598325393408E-4, -2.895173121361949E-4, -1.9105466004698535E-4, 2.803960095391078E-4, -1.5484108711601163E-4, -8.209172337375614E-5, -0.0031130617244679443, 2.7363907791358444E-5, },
		{-2.461881115498783E-4, 0.0013995562941362429, 3.117744153999513E-4, 0.0010456109845848466, -2.916969754459542E-4, -2.9709038905811197E-4, 2.8232750346715574E-4, -5.221922218773614E-5, -8.432524780723621E-5, -0.0031437865012129175, 2.8108415935798603E-5, }, 
		{-7.81934649066582E-5, 1.454183490121939E-5, 7.726358616475806E-5, 9.517219595292265E-6, -7.754824292248387E-5, -2.1522029126884445E-6, 7.768108274275364E-5, -1.2848048725281334E-6, 1.195558382444345E-6, -3.093307006694137E-5, -3.9851946081396854E-7, }, 
		{-0.0024220143758339613, 0.006271231420094739, -8.063053507086221E-4, 0.00331787292778582, -1.819557900699098E-4, -3.8243282129230005E-4, 6.431443224328426E-4, -9.874392284049682E-4, 0.004150696791269393, -0.012328848447275387, -0.001383565597089742, }};



double[][] rhsArray = {{0.10066706963439387}, {-1.1253041326910775}, {-0.009554033543531015},{-12.066601176575546},{-0.5826825607125912},{-0.5935558657306856},{-0.8850361120530756},{3.332858333113421},{-0.0010376872414894558},{-0.0010479288337377698},{-1.0311023355648677E-5},{-0.004109616149092249}};

//Matrix aplusb = new Matrix(AplusB);
//Matrix rhs = new Matrix(rhsArray);
//Matrix ans = aplusb.solve(rhs);
//
//System.out.println(String.valueOf(Arrays.deepToString(ans.getArray()).toString()));



	

	}// end main
}//end class
